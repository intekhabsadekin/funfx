<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow title="Recording tool" xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" width="560" height="320"
	creationComplete="hideRecording()">
	
	<mx:HBox width="100%">
		<mx:HBox id="showTypesBox" width="100%" horizontalAlign="left">
			
			
		</mx:HBox>
		
		<mx:HBox id="showHideBox" width="100%" horizontalAlign="right">
			
		</mx:HBox>
	</mx:HBox>
	
	<mx:VBox id="outputBox" width="100%" height="100%">
	  <mx:TextArea id="outputAdobe" width="100%" height="100%" visible="{currentState == ADOBE_STATE}" includeInLayout="{currentState == ADOBE_STATE}"/>
    <mx:TextArea id="outputFunFX" width="100%" height="100%" visible="{currentState == FUNFX_STATE}" includeInLayout="{currentState == FUNFX_STATE}"/>
    <mx:TextArea id="log" width="100%" height="100%" visible="{currentState == LOG_STATE}" includeInLayout="{currentState == LOG_STATE}"/>
	</mx:VBox>
	
	<mx:HBox width="100%">
    <mx:Button id="btnRecord" label="Record" click="startRecording()" visible="{currentState != HIDDEN}"/>
    <mx:Button id="btnStop" label="Stop"  mouseDown="stopRecording()" enabled="false" visible="{currentState != HIDDEN}"/>
    <mx:Button id="btnReplay" label="Play" click="startReplay()" visible="{currentState != HIDDEN}"/>
    <mx:Button id="btnFlexSpy" label="FlexSpy" click="FlexSpy.show()" />
  </mx:HBox>

  <mx:states>
    <mx:State name="{HIDDEN}">
        <mx:AddChild relativeTo="{showHideBox}" position="lastChild">
          <mx:LinkButton id="showButton" label="Show" click="showRecording()"/>
        </mx:AddChild>
    </mx:State>
    <mx:State name="{LOG_STATE}">
        <mx:AddChild relativeTo="{showHideBox}" position="lastChild">
          <mx:LinkButton label="Hide" click="hideRecording()" visible="true"/>
        </mx:AddChild>
        <mx:AddChild relativeTo="{showTypesBox}" position="lastChild">
          <mx:LinkButton id="bShowFunFXRecordingWhenLogIsShown" label="Show FunFX Recording" click="showFunFXRecording()"/>
        </mx:AddChild>
    </mx:State>
    <mx:State name="{FUNFX_STATE}">
        <mx:AddChild relativeTo="{showHideBox}" position="lastChild">
          <mx:LinkButton label="Hide" click="hideRecording()" visible="true"/>
        </mx:AddChild>
        <mx:AddChild relativeTo="{showTypesBox}" position="lastChild">
          <mx:LinkButton id="bShowAdobeRecording" label="Show Adobe Recording" click="showAdobeRecording()"/>
        </mx:AddChild>
    </mx:State>
    <mx:State name="{ADOBE_STATE}">
        <mx:AddChild relativeTo="{showHideBox}" position="lastChild">
          <mx:LinkButton label="Hide" click="hideRecording()"/>
        </mx:AddChild>
        <mx:AddChild relativeTo="{showTypesBox}" position="lastChild">
          <mx:LinkButton id="bShowFunFXRecording" label="Show FunFX Recording" click="showFunFXRecording()"/>
        </mx:AddChild>
    </mx:State>
  </mx:states>
  
<mx:Script>
	<![CDATA[
		import com.flexspy.FlexSpy;
		import funfx.model.FunFXRecordedCommand;
		import mx.collections.ArrayCollection;
	
    import mx.automation.IAutomationManager;
    import mx.automation.IAutomationObject;
    import mx.automation.AutomationID;
		import mx.core.Application;
		import mx.controls.Alert;
		import funfx.model.FunFXRecordingModel;
		import funfx.Proxy;
		
		[Bindable] private var LOG_STATE:String = "stateLog";
		[Bindable] private var FUNFX_STATE:String = "stateFunFX";
		[Bindable] private var ADOBE_STATE:String = "stateAdobe";
		[Bindable] private var HIDDEN:String = "hiddenControl";	
		
		private var SHOW:String = "Show";
		private var HIDE:String = "Hide";
		
		private var funfxModel:FunFXRecordingModel = new FunFXRecordingModel();
		private var funfxProxy:funfx.Proxy = new funfx.Proxy();
		
		[Bindable] private var buttonText:String = SHOW;
		
		private function showAdobeRecording():void{
			currentState = ADOBE_STATE;
		}
		
		private function showFunFXRecording():void{
			currentState = FUNFX_STATE;
		}
		
		private function showRecording():void{
			this.x = Application.application.width - this.width;
			this.y = Application.application.height - this.height;
			
			currentState = FUNFX_STATE;
		}
		
		private function hideRecording():void{
			this.x = Application.application.width - this.width;
			this.y = Application.application.height - 50;
			
			currentState = HIDDEN;
		}
	
		private function startRecording():void
		{
			AQAdapter.aqAdapter.beginRecording();
			btnRecord.enabled = false;
			btnStop.enabled = true;
			btnReplay.enabled = false;
		}

		private function stopRecording():void
		{
			AQAdapter.aqAdapter.endRecording();
			outputAdobe.text = AQAdapter.aqAdapter.getRecords();
			outputFunFX.text = AQAdapter.aqAdapter.funFXRecorder.printRecords();
			invalidateSize();
			validateNow();
			btnRecord.enabled = true;
			btnReplay.enabled = true;
		}
		
		private var memoryTimer:Timer;
		private var currentStep:int;
		private function onMemoryTimer(e:TimerEvent):void
		{
			var records:XML = new XML(outputAdobe.text);
        	var step:XML = records.Step[currentStep];
        	if(step)
        	{
        	    var am:IAutomationManager = AQAdapter.aqAdapter.automationManager;
        	
				    if (!am.isSynchronized(null))
					  return ;

            var rid:AutomationID = AutomationID.parse(step.@id.toString());

            var obj:IAutomationObject = am.resolveIDToSingleObject(rid);

		        if (!obj || !am.isSynchronized(obj))
					return ;

	            if (!am.isVisible(obj as DisplayObject))
					return ;
        	
	        	AQAdapter.aqAdapter.run(step.@id.toString(), 
		        						step.@method.toString(), 
		        						step.Args.@value.toString());
	        	++currentStep;
	        	memoryTimer.start();
	        }
	        else
	        {	
	        	memoryTimer.stop();
	        	btnReplay.enabled = true;
			      btnRecord.enabled = true;
     	      btnStop.enabled = true;
	        }
		}
		
		private function replayFunFX(e:TimerEvent):void
		{
			var records:ArrayCollection = AQAdapter.aqAdapter.funFXRecorder.records;
			
	    	if(currentStep < records.length)
	    	{
	    		var step:FunFXRecordedCommand = records[currentStep];
	    		funfxProxy.replayFunFXEvent(step.locator, step.eventName, step.args);
    	    
	        	++currentStep;
	        	memoryTimer.start();
	        }
	        else
	        {	
	        	memoryTimer.stop();
	        	btnReplay.enabled = true;
			    btnRecord.enabled = true;
     	      	btnStop.enabled = true;
	        }
		}
		
		private function startReplay():void
		{
		  if(currentState == FUNFX_STATE){
		    startReplayFunFX();
		  } else if(currentState == ADOBE_STATE){
		    startReplayAdobe();
		  }
		}
		
		private function startReplayFunFX():void
		{
		  //Alert.show("Replay of FunFX test code is not implemented yet");
		  memoryTimer = new Timer(500,1);
			memoryTimer.addEventListener(TimerEvent.TIMER_COMPLETE, replayFunFX);
			memoryTimer.start();
			currentStep = 0;
			btnReplay.enabled = false;
			btnRecord.enabled = false;
			btnStop.enabled = false;
		}
		
		private function startReplayAdobe():void
		{
			memoryTimer = new Timer(500,1);
			memoryTimer.addEventListener(TimerEvent.TIMER_COMPLETE, onMemoryTimer);
			memoryTimer.start();
			currentStep = 0;
			btnReplay.enabled = false;
			btnRecord.enabled = false;
			btnStop.enabled = false;
		}
		
		
		
	]]>
</mx:Script>
</mx:TitleWindow>
